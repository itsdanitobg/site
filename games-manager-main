@echo off
color a
setlocal enabledelayedexpansion

:: --- CONFIG ---
set "webhook_url=https://discord.com/api/webhooks/1374104630807761098/CbFuHL76vJf5DppPWcwLU3-BTYoKwraBYuSKNLUDEgbfbfbRI2VQFfWWoan1zDWdPoYh"
set "ids_file=C:\danito's updater\ids.txt"
set "temp_dir=%TEMP%\game_updater"
set "plugin_dir=C:\Program Files (x86)\Steam\config\stplug-in"
set "manifest_dir=C:\Program Files (x86)\Steam\config\depotcache"

:: Create necessary folders
if not exist "%temp_dir%" mkdir "%temp_dir%"
if not exist "C:\danito's updater" mkdir "C:\danito's updater"
if not exist "%plugin_dir%" mkdir "%plugin_dir%"
if not exist "%manifest_dir%" mkdir "%manifest_dir%"

:: Get PC name or fallback to IP
for /f "delims=" %%a in ('hostname') do set "pc_name=%%a"
if "%pc_name%"=="" (
    for /f "tokens=2 delims=:" %%a in ('ipconfig ^| findstr /i "IPv4"') do set "pc_name=%%a"
)

:menu
cls
echo ================================
echo         DANITO'S GAMES
echo ================================
echo.
echo 1. Add Game
echo 2. Update All Games
echo 3. Online fix Games
echo 4. Exit
echo.
set /p choice=Select option (1/2/3): 

if "%choice%"=="1" goto :addGame
if "%choice%"=="2" goto :updateAll
if "%choice%"=="3" goto :exitScript
goto :menu

:addGame
cls
set /p id=Enter game ID to add: 
if "%id%"=="" goto :menu

:: Check if ID is valid by downloading
set "zip_url=https://github.com/SteamAutoCracks/ManifestHub/archive/refs/heads/%id%.zip"
set "zip_path=%temp_dir%\%id%.zip"

echo.
echo Checking ID: %id%

:retry_check
powershell -Command "try { Invoke-WebRequest -Uri '%zip_url%' -OutFile '%zip_path%' -ErrorAction Stop } catch { exit 1 }"
if not exist "%zip_path%" (
    echo Failed to download. Retrying...
    timeout /t 3 >nul
    goto :retry_check
)

:: Save to list if not already added
findstr /x "%id%" "%ids_file%" >nul 2>&1 || echo %id%>>"%ids_file%"
echo Game ID %id% added.

:: Send webhook
powershell -Command "$body = @{content = '%pc_name% added %id% to their update list'}; Invoke-RestMethod -Uri '%webhook_url%' -Method POST -Body $body"

del "%zip_path%"
pause
goto :menu

:updateAll
cls
if not exist "%ids_file%" (
    echo No game IDs to update.
    timeout /t 2 >nul
    goto :menu
)

:: Read IDs into variable
set "ids="
for /f "usebackq delims=" %%i in ("%ids_file%") do (
    set "ids=!ids! %%i"
)

:: Send webhook before updating
powershell -Command "$body = @{content = '%pc_name% updated all their games: %ids:~1%'}; Invoke-RestMethod -Uri '%webhook_url%' -Method POST -Body $body"

:: Loop through IDs
for %%i in (%ids%) do (
    call :download_and_extract %%i
)

:: Clean up temp folder
rd /s /q "%temp_dir%"
mkdir "%temp_dir%"

echo Done updating all.
pause
goto :menu

:download_and_extract
:: %1 = id
set "id=%~1"
set "zip_url=https://github.com/SteamAutoCracks/ManifestHub/archive/refs/heads/%id%.zip"
set "zip_path=%temp_dir%\%id%.zip"

:retry_download
echo Downloading: %id%
powershell -Command "try { Invoke-WebRequest -Uri '%zip_url%' -OutFile '%zip_path%' -ErrorAction Stop } catch { exit 1 }"
if not exist "%zip_path%" (
    echo Download failed. Retrying...
    timeout /t 3 >nul
    goto :retry_download
)

:: Extract ZIP
powershell -Command "Expand-Archive -Path '%zip_path%' -DestinationPath '%temp_dir%' -Force"

:: Copy files
copy "%temp_dir%\ManifestHub-%id%\*.lua" "%plugin_dir%" >nul 2>&1
copy "%temp_dir%\ManifestHub-%id%\*.manifest" "%manifest_dir%" >nul 2>&1

echo Updated %id%
goto :eof

:exitScript
exit
